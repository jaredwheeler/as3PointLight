package  {	import flash.display.*;	import flash.events.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.geom.Point;		public class Main extends MovieClip {				private var bitmapFilePath	:String = "alf.jpg"; //path to an image file representing the gameboard		private var bitmapLoader	:Loader;		private var	gameboardSrc	:BitmapData;				public var 	b				:Bitmap; //bitmap holding the gameboard data		public var 	gameboard		:BitmapData; //gameboard data;				private var	pointLights		:Array; //the keeper of the lights				public function Main( )		{			//Load the gameboard image			bitmapLoader = new Loader( );			bitmapLoader.contentLoaderInfo.addEventListener (Event.COMPLETE, handleGameboardLoad );			bitmapLoader.load( new URLRequest( bitmapFilePath ) );		}				public function handleGameboardLoad( e:Event )		{			//grab the bitmapData out of the loaded file			gameboardSrc = e.target.content.bitmapData;						//run setup 			setup( );		}				public function setup( )		{			//Make a Bitmap/Data to render lights into			gameboard = new BitmapData( gameboardSrc.width, gameboardSrc.height );			b = new Bitmap( gameboard );			addChild( b );						//Make some pointLights			pointLights = new Array( );			//new PointLight( (x,y), red val(0-255), green val(0-255), blue val(0-255), radius(in pixels), intensity(0-1), flicker(0-1) )			pointLights.push( new PointLight( new Point( 170, 30 ), 255, 255, 255, 170, 1, 0.1 ) );			pointLights.push( new PointLight( new Point( 350, 300 ), 255, 255, 127, 270, 1, 0.1 ) );			pointLights.push( new PointLight( new Point( 100, 350 ), 125, 255, 255, 170, 1, 0.1 ) );						//set up the enterframe loop and get down to business			//addEventListener( Event.ENTER_FRAME, drawLights );			drawLights( );		}				public function drawLights( e:Event = null )		{			gameboard.copyPixels( gameboardSrc, gameboardSrc.rect, new Point( 0, 0 ) );						for( var i in pointLights )			{				pointLights[ i ].update( );				pointLights[ i ].renderInto( gameboard );			}		}	}	}